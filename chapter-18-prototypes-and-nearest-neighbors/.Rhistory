data = read.table("https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data")
data = read.table("https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data", sep = ",")
data
data = read.table("https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data", sep = ",", header = TRUE)
data
library(car)
scatterplot.matrix(~ sbp + tobbacco + ldl + famhist + obesity + alcohol + age | child, data = data)
library(car)
scatterplot.matrix(~ sbp + tobbacco + ldl + famhist + obesity + alcohol + age, data = data)
scatterplotMatrix( ~ sbp + tobbacco + ldl + famhist + obesity + alcohol + age, data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age, data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age, data = data)
library(car)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | child, data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, data = data)
?warning
suppressWarnings(expr)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, data = data)
?scatterplotMatrix
pairs( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16), col = c("red", "blue"), data = data)
library(car)
suppressWarnings(warning())
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16), col = c("red", "blue"), data = data)
suppressWarnings(warnings())
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16), col = c("red", "blue"), data = data)
glm.full = glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age, data = data, family = binomial)
glm.full
summary(glm.full)
round(summary(glm.full), 2)
drop1(glm.full, test = "LRT")
drop1(update(glm.full, ~ . - alcohol), test = "LRT")
drop1(update(glm.full, ~ . - obesity - alcohol), test = "LRT")
drop1(update(glm.full, ~ . - sbp - obesity - alcohol), test = "LRT")
summary(update(glm.full, ~ . - sbp - obesity - alcohol))
?colors
?blues9
colors()[grep("sky",colors())]
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "skyblue2"), data = data)
colors()[grep("blue",colors())]
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "deepskyblue4"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "royalblue"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "royalblue1"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "powderblue"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "slateblue"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "aliceblue"), data = data)
scatterplotMatrix( ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age | chd, pch = c(16, 16),
col = c("red", "blue2"), data = data)
?mvt
?mtvnorm
?eye
?eyes
mvrnorm(n = 10, mu = c(1,0), Sigma = matrix(c(1,0,0,1), nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
library(MASS)
mvrnorm(n = 10, mu = c(1,0), Sigma = matrix(c(1,0,0,1), nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
mean = mvrnorm(n = 10, mu = c(1,0), Sigma = matrix(c(1,0,0,1), nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
plot(mean)
?rand
x = runif(n = 200, min = -2, max = 2)
k = sample(1:200, 5, replace = F)
sample(1:10, 5, replace=T)
k
x = runif(n = 200, min = -2, max = 2)
k = sample(1:200, 5, replace = F)
k
x[k]
x[k[1]]
abs(-3)
gauss.ker = function(x, y, nu){
result = exp(-nu * (x - y)^2 )
return(result)
}
epan.ker = function(x, y, nu){
m = abs(x-u)/nu;
if( m <= 1){d = 0.75 * (1 - (x-y)^2)}
if( abs(x-y) > 1){d = 0}
return(d)
}
tri.ker = function(x, y, nu){
if( abs( x-y ) <= 1){d = 1 - (x-y)^3}
if( abs(x-y) > 1){d = 0}
return(d)
}
x = seq(min = -3, max = 3, by = 0.1)
gauss.y = gauss.ker(x, 0, 0.2)
x = seq(-3, 3, by = 0.1)
gauss.y = gauss.ker(x, 0, 0.2)
gauss.y
gauss.y = gauss.ker(x, 0, 0.2)
epan.y = epan.ker(x, 0, 0.2)
epan.ker = function(x, y, nu){
m = abs(x-y)/nu;
if( m <= 1){d = 0.75 * (1 - (x-y)^2)}
if( abs(x-y) > 1){d = 0}
return(d)
}
epan.y = epan.ker(x, 0, 0.2)
epan.y
epan.ker = function(x, y, nu){
m = abs(x-y)/nu;
if( m <= 1 ){d = 0.75 * (1 - (x-y)^2)}else( abs(x-y) > 1){d = 0}
epan.ker = function(x, y, nu){
m = abs(x-y)/nu;
if( m <= 1 ){d = 0.75 * (1 - (x-y)^2)}else{d = 0}
return(d)
}
epan.y = epan.ker(x, 0, 0.2)
library(ElemStatLearn)
data(SAheart)
SAheart
density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
density(SAheart$sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens)
dens = density(SAheart$sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens)
?rugs
?rug
dens = density(SAheart$sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2)
attach(SAheart)
dens = density(#SAheart$
sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2)
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2)
rug(sbp, lwd = 0.5, col = "darkslategray")
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, ylim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkslategray")
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkslategray")
dim(sbp)
dim(SAheart$sbp)
length(sbp)
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkslategray1")
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
sbp[1]
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
den = density(sbp[1], bw = "nrd0", adjust = 1, kernel = c("gaussian"))
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt{2*pi*lambda^2})*exp(-(x - poi)^2)/(2*lambda^2))
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(result)
}
den(9, 2)
dens
summary(dens)
dens$bw
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(poi, result))
}
den(4, 0.3)
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
den(4, 0.5)
# Density Estimation
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = den(sbp[i], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
den = den(sbp[1], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
den = den(sbp[1], lambda = dens$bw)
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
den = den(sbp[1], lambda = dens$bw)
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
den = den(sbp[1], lambda = dens$bw)
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
den = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
den = den(sbp[1], lambda = dens$bw)
den$point
den$y
plot(den$point, den$y)
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
densityest = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
den = densityest(sbp[1], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = den(sbp[i], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
dens = density(sbp, bw = 0.05, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
dens = density(sbp, bw = 2, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
dens = density(sbp, bw = 3, kernel = c("gaussian"))
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
dens$bw
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = 3)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
dens = density(sbp, bw = "nrd0", adjust = 1, kernel = c("gaussian"))
densityest = function(x, lambda){
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/10)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw*10)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/2)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/3)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/1.5)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/1.5)
lines(den$point, den$y, lty = 1, lwd = 1, col = "lightgray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw)
lines(den$point, den$y, lty = 1, lwd = 1, col = "lightgray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/1.5)
lines(den$point, den$y, lty = 1, lwd = 1, col = "lightgray")
}
plot(dens, xlab = "Systolic Blood Pressure", ylab = "Density Estimate", main = "Density Estimate for SBP", col = "red", type = "l", lwd = 2, xlim = c(100, 220))
rug(sbp, lwd = 0.5, col = "darkturquoise")
for(i in 1:length(sbp)){
den = densityest(sbp[i], lambda = dens$bw/1.5)
lines(den$point, den$y, lty = 1, lwd = 1, col = "gray83")
}
gau.ker = function(x){
lam = 0.2;
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lambda^2)*exp(-(x - poi)^2)/(2*lambda^2))
return(list(point = poi, y = result))
}
gau1 = gau.ker(-2)
gau.ker = function(x){
lam = 0.2;
poi = seq(x - 10, x + 10, by = 0.05)
result = (1/sqrt(2*pi*lam^2)*exp(-(x - poi)^2)/(2*lam^2))
return(list(point = poi, y = result))
}
gau1 = gau.ker(-2)
gau2 = gau.ker(0)
gau3 = gau.ker(1)
gau4 = gau.ker(4)
plot(gau1$point, gau1$result, xlab = "x", ylab = "Kernel Values", main = "Effects of Creating Holes", col = "red", type = "l", lwd = 2)
lines(gau2$point, gau2$result, col = "blue", type = "l", lwd = 2)
lines(gau3$point, gau3$result, col = "blue", type = "l", lwd = 2)
lines(gau4$point, gau4$result, col = "blue", type = "l", lwd = 2)
gau.ker = function(x, lam){
poi = seq(x - 5, x + 5, by = 0.05)
result = (1/sqrt(2*pi*lam^2)*exp(-(x - poi)^2)/(2*lam^2))
return(list(point = poi, y = result))
}
lam = 2
gau1 = gau.ker(-2, lam)
gau2 = gau.ker(0, lam)
gau3 = gau.ker(1, lam)
gau4 = gau.ker(4, lam)
plot(gau1$point, gau1$result, xlab = "x", ylab = "Kernel Values", main = "Effects of Creating Holes", col = "red", type = "l", lwd = 2)
lines(gau2$point, gau2$result, col = "blue", type = "l", lwd = 2)
lines(gau3$point, gau3$result, col = "blue", type = "l", lwd = 2)
lines(gau4$point, gau4$result, col = "blue", type = "l", lwd = 2)
?runif
train.size = 100; test.size = 1000;
# training
train.design = matrix(0, nrow = train.size, ncol = 10)
for(i in 1:train.size){
for(j in 1:10){
train.design[i,j] = runif(1, 0, 1)
}
}
class.easy = matrix(0, nrow = train.size, ncol = 1)
class.hard = matrix(0, nrow = train.size, ncol = 1)
for(i in 1:train.size){
class.easy[i,1] = I(train.design[i,1] > 0.5)
class.hard[i,1] = I(train.design[i,1] * train.design[i,2] * train.design[i,3] > 0)
}
class.easy
class.hard
class.easy = matrix(0, nrow = train.size, ncol = 1)
class.hard = matrix(0, nrow = train.size, ncol = 1)
for(i in 1:train.size){
class.easy[i,1] = I(train.design[i,1] > 0.5)
class.hard[i,1] = I((train.design[i,1]-0.5) * (train.design[i,2]-0.5) * (train.design[i,3]-0.5) > 0)
}
class.hard
cbind(class.easy, class.hard, train.design)
