library(mlbench)
data("BostonHousing")
df <- BostonHousing
View(df)
summary(df)
pairs(df)
pairs(df)
# build a model with all variables
lm.all <- lm(medv ~ ., data = df)
# build a model with all variables
lm_all <- lm(medv ~ ., data = df)
summary(lm_all)
step(lm_all, direction = "backward", trace = 0)
step(lm_all, direction = "backward")
?step
library(leaps)
install.packages('leaps')
library(leaps)
library(glmnet)
install.packages('glmnet')
library(glmnet)
###########################################
# All Subset Regression
all_subset <- regsubsets(medv ~ . , data = df)
summary(all_subset)
###########################################
# All Subset Regression
all_subset <- leaps(medv ~ . , data = df)
df[-medv]
df
df[-'medv']
class(df)
df[:, -medv]
library(tidyverse)
X <- df %>% select(-medv)
X
dim(X)
y <- df %>% select(medv)
install.packages('olsrr')
library(olsrr)
model <- lm(medv ~ ., data = df)
all_pos <- ols_step_all_possible(model)
data('mtcars')
data("mtcars")
df <- mtcars
summary(df)
model <- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
all_model <- ols_step_all_possible(model)
plot(all_model)
plot(all_model)
all_model
plot(all_model)
data("BostonHousingPrice")
# install.packages(c('mlbench', 'leaps', 'glmnet', 'tidyverse', 'olsrr'))
library(mlbench)
data("BostonHousing")
df <- BostonHousing
summary(df)
X <- df %>% select(-medv)
y <- df %>% select(medv)
View(df)
###########################################
# All Subset Regression
leaps(x = X, y = y, method = "Cp") # adjusted R^2 is possible
X <- df %>% select(-medv)
y <- df %>% select(medv)
###########################################
# All Subset Regression
leaps(x = X, y = y, method = "Cp") # adjusted R^2 is possible
nrow(X)
nrow(y)
columns(X)
colnames(X)
X <- df %>% select(crim, zn, nox, rm, age, dis, ptratio)
y <- df %>% select(medv)
X
leaps(x = X, y = y, method = "Cp") # adjusted R^2 is possible
df1 <- cbind(X, y)
df1
###########################################
# stepwise regression
ols_step_all_possible(medv ~ ., data = df1)
###########################################
# stepwise regression
model <- lm(medv ~ ., data = df1)
k <- ols_step_all_possible(model)
plot(k)
k
###########################################
# stepwise regression
ols_step_backward_aic(model)
###########################################
# stepwise regression
model_full <- lm(medv ~., data = df)
ols_step_backward_aic(model_full)
ols_step_forward_aic(model_inter)
# forward
model_inter <- lm(medv ~ 1, data = df)
ols_step_forward_aic(model_inter)
ols_step_forward_aic(model_full)
# forward and backward
ols_step_both_aic(model_full)
regsubsets.out <- regsubsets(medv ~ ., data = df1, method = "exhaustive")
regsubsets.out
summary(regsubsets.out)
subsets(regsubsets.out, statistic = "adjr2", legend = FALSE, min.size = 5, main = "Adjusted R^2")
which.max(k$adjr)
k[which.max(k$adjr), ]
k[which.min(k$cp), ]
k[which.min(k$aic), ]
k[which.min(k$sbc), ]
###########################################
# shrinkage
###########################################
lambdas <- 10 ^ seq(-5, -2, by = 0.1)
lambdas
###########################################
# shrinkage
###########################################
(lambdas <- 10 ^ seq(-5, -2, by = 0.2))
# ridge
cv_fit <- cv.glmnet(X, y, alpha = 0, lambda = lambdas)
# ridge
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 0, lambda = lambdas)
cv_fit
plot(cv_fit)
# ridge
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 0, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 0, lambda = opt_lambda)
ridge_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 0, lambda = opt_lambda)
summary(ridge_reg)
coef(ridge_reg)
###########################################
# shrinkage
###########################################
(lambdas <- 10 ^ seq(-5, 1, by = 0.2))
# ridge
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 0, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
ridge_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 0, lambda = opt_lambda)
summary(ridge_reg)
coef(ridge_reg)
pred_y <- predict(ridge_reg, newx = data.matrix(X))
pred_y
mean((pred_y - y) ^ 2)
mean((pred_y - y) ^ 2)
mean((pred_y - as.vector(y)) ^ 2)
pred_y
class(pred_y)
class(y)
mean((pred_y - as.matrix(y)) ^ 2)
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 0.5, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
en_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 0.5, lambda = opt_lambda)
summary(en_reg)
coef(en_reg)
pred_y <- predict(en_reg, newx = data.matrix(X))
mean((pred_y - as.matrix(y)) ^ 2) # RMSE
# lasso
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 1, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
lasso_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 1, lambda = opt_lambda)
summary(lasso_reg)
coef(lasso_reg)
pred_y <- predict(lasso_reg, newx = data.matrix(X))
mean((pred_y - as.matrix(y)) ^ 2) # RMSE
X <- df %>% select(-medv)
y <- df %>% select(medv)
df1 <- cbind(X, y)
###########################################
# all subset regression
model <- lm(medv ~ ., data = df1)
(k <- ols_step_all_possible(model))
# elastic net
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 0.5, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
en_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 0.5, lambda = opt_lambda)
summary(en_reg)
coef(en_reg)
# lasso
cv_fit <- cv.glmnet(data.matrix(X), data.matrix(y), alpha = 1, lambda = lambdas, nfold = 10)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
lasso_reg <- glmnet(data.matrix(X), data.matrix(y), family = "gaussian", alpha = 1, lambda = opt_lambda)
summary(lasso_reg)
coef(lasso_reg)
pred_y <- predict(lasso_reg, newx = data.matrix(X))
mean((pred_y - as.matrix(y)) ^ 2) # RMSE
data('"faithful"')
data("faithful")
summary(faithful)
support_lower <- 0
support_upper <- 1
length.out <- 1e5 + 1
# density is small, but the derivative is large
special_den1 <- function(x, k) {
return(sin(k * pi * x) + 1)
}
x <- seq(support_lower, support_upper, length.out = length.out)
y <- special_den1(x, k = 10)
plot(x, y, type = 'l')
special_den1 <- function(x, k) {
return(2 ^ (-10) * (sin(k * pi * x) + 1))
}
x <- seq(support_lower, support_upper, length.out = length.out)
y <- special_den1(x, k = 10)
plot(x, y, type = 'l')
y <- special_den1(x, k = 100)
plot(x, y, type = 'l')
integrate(f = special_den1, lower = support_lower, upper = support_upper)
integrate(f = special_den1, lower = support_lower, upper = support_upper, k = 100)
special_den1 <- function(x, k) {
return((sin(k * pi * x) + 1))
}
x <- seq(support_lower, support_upper, length.out = length.out)
y <- special_den1(x, k = 100)
plot(x, y, type = 'l')
integrate(f = special_den1, lower = support_lower, upper = support_upper, k = 100)
library(denProjEst)
data("faithful")
data <- faithful$eruptions
sample_space <- c(1, 6)
summary(data)
result1 <- visualize_estimates(data = data,
basis = poly_b(7),
sample_space = sample_space,
x_name = "eruptions")
result1 <- visualize_estimates(data = data,
basis = poly_b(6),
sample_space = sample_space,
x_name = "eruptions")
result1 <- visualize_estimates(data = data,
basis = poly_b(5),
sample_space = sample_space,
x_name = "eruptions")
result1$plot_den
plot_ori <- list()
plot_den <- list()
rm(plot_ori)
plot_logden <- list()
plot_logdend1 <- list()
plot_logdend2 <- list()
getwd()
result1 <- visualize_estimates(data = data,
basis = trig_b(6),
sample_space = sample_space,
x_name = "eruptions")
result1$plot_den
result1$param_sm
result1 <- visualize_estimates(data = data,
basis = spline_b(6, sample_space),
sample_space = sample_space,
x_name = "eruptions")
library(denProjEst)
result1 <- visualize_estimates(data = data,
basis = spline_b(6, sample_space),
sample_space = sample_space,
x_name = "eruptions")
library(denProjEst)
###################################################################################################
###################################################################################################
# Geyser
data("faithful")
data1 <- faithful$eruptions
summary(data1)
n_obs <- nrow(faithful)
result_plot <- visualize_estimates(data = data,
basis = spline_b(i, sample_space = c(1, 6)),
sample_space = c(1, 6),
x_name = "eruptions")
result_plot <- visualize_estimates(data = data,
basis = spline_b(6, sample_space = c(1, 6)),
sample_space = c(1, 6),
x_name = "eruptions")
result_plot <- visualize_estimates(data = data1,
basis = spline_b(6, sample_space = c(1, 6)),
sample_space = c(1, 6),
x_name = "eruptions")
result_plot$plot_den
m <- 5
plot_list_geyser1 <- list()
plot_list_log_geyser1 <- list()
plot_list_logderivative1_geyser1 <- list()
plot_list_logderivative2_geyser1 <- list()
H_theta_list <- list()
KL_theta_list <- list()
type <- 'poly'
for (i in 1:m) {
print(i)
result_plot <- visualize_estimates(data = data1,
basis = poly_b(i),
sample_space = sample_space,
x_name = "eruptions")
plot_list_geyser1[[i]] <- result_plot$plot_original
plot_list_log_geyser1[[i]] <- result_plot$plot_log
plot_list_logderivative1_geyser1[[i]] <- result_plot$plot_log_derivative1
plot_list_logderivative2_geyser1[[i]] <- result_plot$plot_log_derivative2
H_theta_list[[i]] <- result_plot$H_theta
KL_theta_list[[i]] <- result_plot$KL_theta
}
sample_space <- c(1, 6)
for (i in 1:m) {
print(i)
result_plot <- visualize_estimates(data = data1,
basis = poly_b(i),
sample_space = sample_space,
x_name = "eruptions")
plot_list_geyser1[[i]] <- result_plot$plot_original
plot_list_log_geyser1[[i]] <- result_plot$plot_log
plot_list_logderivative1_geyser1[[i]] <- result_plot$plot_log_derivative1
plot_list_logderivative2_geyser1[[i]] <- result_plot$plot_log_derivative2
H_theta_list[[i]] <- result_plot$H_theta
KL_theta_list[[i]] <- result_plot$KL_theta
}
result_plot <- visualize_estimates(data = data1,
basis = poly_b(1),
sample_space = sample_space,
x_name = "eruptions")
library(expofamdensity)
true_den <- mixnormal(c(0.9, 0.1), c(0, 0), c(1, 10), c(-20, 20))
xplot <- seq(-20, 20, length.out = 1e4+1)
yden <- true_den$den_val(xplot)
plot(xplot, yden, type = 'l')
hproj <- expofamdensity_projection(true_den, basis = poly_n(0, 1, c(-20, 20)))
hproj <- expofamdensity_projection(true_den, basis = poly_b(0, 1, c(-20, 20)))
hproj$coefficients
hproj <- expofamdensity_projection(true_den, basis = poly_b(0, 3, c(-20, 20)))
klproj <- expofamdensity_projection(true_den, basis = poly_b(0, 3, c(-20, 20)), method = 'kl', kl_opt_control = opt_control(start_pt = rep(0, 3)))
klproj$coefficients
hproj$coefficients
predict_density(klproj, seq(-1, 1, 0.1))
predict_density(hproj, seq(-1, 1, 0.1))
predict_logden_deriv1(hproj, seq(-1, 1, 0.1))
predict_logden_deriv2(hproj, seq(-1, 1, 0.1))
plot_den_deriv_projections(true_den, hproj, klproj, c(-5, 5))
library(expofamdensity)
true_den <- true_den(c(0.9, 0.1), c(0, 0), c(0.5, 1), c(-10, 10))
true_den <- mixnormal(c(0.9, 0.1), c(0, 0), c(0.5, 1), c(-10, 10))
x <- seq(-5, 5, 0.01)
y <- true_den$den_val(x)
plot(x, y, type= 'l')
true_den <- mixnormal(c(0.9, 0.1), c(0, 0), c(0.2, 1), c(-10, 10))
y <- true_den$den_val(x)
plot(x, y, type= 'l')
basis <- poly_b(0, 2, c(-10, 10))
hproj <- expofamdensity_projection(true_den, basis)
klproj <- expofamdensity_projection(true_den, basis, 'kl', opt_control(start_pt = basis$degree))
klproj <- expofamdensity_projection(true_den, basis, 'kl', opt_control(start_pt = rep(0, basis$degree)))
plot_den_deriv_projections(true_den, hproj, klproj, c(-5, 5))
hproj$coefficients
klproj$coefficients
basis <- poly_b(0, 4, c(-10, 10))
hproj1 <- expofamdensity_projection(true_den, basis)
klproj1 <- expofamdensity_projection(true_den, basis, 'kl', opt_control(start_pt = rep(0, basis$degree)))
plot_density(klproj1, c(-5, 5))
setwd('/Users/chenxizhou/Dropbox/LaTex_Files/Izenman_Modern_Multivariate_Statistical_Techniques/chapter_7')
knitr::opts_chunk$set(echo = TRUE)
df <- read_csv('food_data.txt')
library(tidyverse)
library(tidyverse)
df <- read_csv('food_data.txt')
df
View(df)
?read_csv
df <- read_csv('food_data.txt', delim = ' ')
df <- read_csv('food_data.txt', delim = '\t')
df <- read_tsv('food_data.txt', delim = '\t')
df <- read_tsv('food_data.txt')
df
df <- read_delim('food_data.txt', delim = " ")
df
summary(df)
colnames(df)
nutrition_pca <- prcomp(mtcars[, c("Fat.grams", "Food.energy.calories",
"Carbohydrates.grams", "Protein.grams",
"Cholesterol.mg", "Saturated.fat.grams")],
center = TRUE,
scale. = TRUE)
df <- read_delim('food_data.txt', delim = " ") %>%
select("Fat.grams", "Food.energy.calories",
"Carbohydrates.grams", "Protein.grams",
"Cholesterol.mg", "Saturated.fat.grams")
df
nutrition_pca <- prcomp(df,
center = TRUE,
scale. = TRUE)
nutrition_pca
nutrition_pca <- prcomp(df#,
)
nutrition_pca
nutrition_pca <- prcomp(df,
center = TRUE)#,
nutrition_pca <- prcomp(df,
nutrition_pca <- prcomp(df, )
=
nutrition_pca <- prcomp(df,
center = TRUE)#,
nutrition_pca
